{"version":3,"file":"ifetliferepository.js","sourceRoot":"","sources":["../../src/repositories/ifetliferepository.ts"],"names":[],"mappings":"","sourcesContent":["import { Response }             from 'node-fetch';\r\n\r\nexport interface IFetlifeRepository {\r\n    login(username: string, password: string, redirectUri: string): Promise<Response>;\r\n    \r\n    refreshToken(refreshToken: string): Promise<Response>;\r\n\r\n    getMe(tokenType: string, accessToken: string) : Promise<Response>;\r\n\r\n    getConversations(tokenType: string, accessToken: string): Promise<Response>;\r\n    getConversations(tokenType: string, accessToken: string, limit?: number | undefined, page?: number | undefined): Promise<Response>;\r\n    getConversations(tokenType: string, accessToken: string, limit?: number | undefined, page?: number | undefined, orderBy?: string | undefined): Promise<Response>;\r\n\r\n    getConversationMessages(tokenType: string, accessToken: string, conversationId: string, sinceMessageId: string, untilMessageId: string, limit: number): Promise<Response>;\r\n\r\n    replyToConversation(tokenType: string, accessToken: string, conversationId: string, message: string): Promise<Response>;\r\n\r\n    createConversation(tokenType: string, accessToken: string, userId: string, subject: string, message: string): Promise<Response>;\r\n\r\n    setMessageAsRead(tokenType: string, accessToken: string, conversationId: string, ids: Array<string>): Promise<Response>;\r\n\r\n    getFriends(tokenType: string, accessToken: string, limit: number, page: number): Promise<Response>;\r\n\r\n    getFriendRequests(tokenType: string, accessToken: string, limit: number, page: number): Promise<Response>;\r\n\r\n    acceptFriendRequest(tokenType: string, accessToken: string, friendRequestId: string): Promise<Response>;\r\n\r\n    deleteFriendRequest(tokenType: string, accessToken: string, friendRequestId: string): Promise<Response>;\r\n\r\n    createFriendRequest(tokenType: string, accessToken: string, memberId: string): Promise<Response>;\r\n\r\n    getProfile(tokenType: string, accessToken: string, memberId: string): Promise<Response>;\r\n\r\n    uploadPicture(tokenType: string, accessToken, picture: any, isAvatar: boolean, friendsOnly: boolean, caption: string, isFromUser: boolean): Promise<Response>;\r\n}"]}