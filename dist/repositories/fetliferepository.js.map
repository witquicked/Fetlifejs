{"version":3,"file":"fetliferepository.js","sourceRoot":"","sources":["../../src/repositories/fetliferepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFetlifeRepository }           from './ifetliferepository';\r\nimport * as Constants                   from '../constants';\r\n\r\nimport { \r\n    AuthBodyRequest, \r\n    TokenRefreshRequest,\r\n    LoginRequest,\r\n    CreateConversationRequest \r\n}                                       from '../requests';\r\n\r\nimport fetch, { RequestInit, RequestMode, Response } from 'node-fetch';\r\nimport * as FormData                    from 'form-data';\r\n\r\nexport class FetlifeRepository implements IFetlifeRepository {    \r\n    private clientId: string;\r\n    private clientSecret: string;\r\n\r\n    public constructor(clientId: string, clientSecret: string) {\r\n        this.clientId = clientId;\r\n        this.clientSecret = clientSecret;\r\n    }\r\n\r\n    public login(username: string, password: string, redirectUri: string) : Promise<Response> {\r\n        const body = <AuthBodyRequest>{\r\n            username,\r\n            password,\r\n            grant_type: Constants.GRANT_TYPE_PASSWORD\r\n        };\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/oauth/token?client_id=${this.clientId}&client_secret=${this.clientSecret}`, <RequestInit>{\r\n            body: JSON.stringify(body),\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    public refreshToken(refreshToken: string): Promise<Response> {\r\n        let form = new FormData();\r\n        \r\n        form.append('refresh_token', refreshToken);\r\n        form.append('client_secret', this.clientSecret);\r\n        form.append('redirect_uri', Constants.REDIRECT_URL);\r\n        form.append('grant_type', Constants.GRANT_TYPE_PASSWORD);\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/oauth/token?client_id=${this.clientId}`, <RequestInit>{\r\n            body: form,\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    public getMe(tokenType: string, accessToken: string) : Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public getConversations(tokenType: string, accessToken: string): Promise<Response>;\r\n    public getConversations(tokenType: string, accessToken: string, limit?: number | undefined, page?: number | undefined): Promise<Response>;\r\n    public getConversations(tokenType: string, accessToken: string, limit?: number | undefined, page?: number | undefined, orderBy?: string | undefined): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/conversations?order_by=${orderBy}&limit=${limit}&page=${page}`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public getConversationMessages(tokenType: string, accessToken: string, conversationId: string, sinceMessageId: string, untilMessageId: string, limit: number): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/conversations/${conversationId}/messages?since_id=${sinceMessageId}&until_id=${untilMessageId}&limit={limit}`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public replyToConversation(tokenType: string, accessToken: string, conversationId: string, message: string): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/conversations/${conversationId}/messages`, <RequestInit>{\r\n            method: 'POST',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` },\r\n            body: message\r\n        });\r\n    }\r\n\r\n    public createConversation(tokenType: string, accessToken: string, userId: string, subject: string, message: string): Promise<Response> {\r\n        const conversation = {\r\n            user_id: userId,\r\n            subject: subject,\r\n            body: message\r\n        };\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/conversations`, <RequestInit>{\r\n            method: 'POST',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` },\r\n            body: JSON.stringify(conversation)\r\n        });\r\n    }\r\n\r\n    public setMessageAsRead(tokenType: string, accessToken: string, conversationId: string, ids: Array<string>): Promise<Response> {\r\n        const body = { ids }\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/conversations/${conversationId}/messages/read`, <RequestInit>{\r\n            method: 'PUT',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` },\r\n            body: JSON.stringify(body)\r\n        });\r\n    }\r\n\r\n    public getFriends(tokenType: string, accessToken: string, limit: number, page: number): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/friends?limit=${limit}&page=${page}`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public getFriendRequests(tokenType: string, accessToken: string, limit: number, page: number): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/friendrequests?limit=${limit}&page=${page}`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public acceptFriendRequest(tokenType: string, accessToken: string, friendRequestId: string): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/friendrequests/${friendRequestId}`, <RequestInit>{\r\n            method: 'PUT',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public deleteFriendRequest(tokenType: string, accessToken: string, friendRequestId: string): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/friendrequests/${friendRequestId}`, <RequestInit>{\r\n            method: 'DELETE',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public createFriendRequest(tokenType: string, accessToken: string, memberId: string): Promise<Response> {\r\n        const body = { memberId };\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/friendrequests`, <RequestInit>{\r\n            method: 'POST',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` },\r\n            body: JSON.stringify(body)\r\n        });\r\n    }\r\n\r\n    public getProfile(tokenType: string, accessToken: string, memberId: string): Promise<Response> {\r\n        return fetch(`${Constants.BASE_URL}/api/v2/members/${memberId}`, <RequestInit>{\r\n            method: 'GET',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` }\r\n        });\r\n    }\r\n\r\n    public uploadPicture(tokenType: string, accessToken: string, picture: any, isAvatar: boolean, friendsOnly: boolean, caption: string, isFromUser: boolean): Promise<any> {\r\n        const body = {\r\n            picture,\r\n            caption,\r\n            is_avatar: isAvatar,\r\n            only_friends: friendsOnly,\r\n            is_of_or_by_user: isFromUser\r\n        };\r\n        \r\n        return fetch(`${Constants.BASE_URL}/api/v2/me/pictures`, <RequestInit>{\r\n            method: 'POST',\r\n            headers: { Authorization: `${tokenType} ${accessToken}` },\r\n            body: JSON.stringify(body)\r\n        });\r\n    }\r\n}"]}