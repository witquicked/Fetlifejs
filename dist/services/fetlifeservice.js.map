{"version":3,"file":"fetlifeservice.js","sourceRoot":"","sources":["../../src/services/fetlifeservice.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAK,SAAS,MAAY,cAAc,CAAC;AAEhD,OAAO,EAEH,iBAAiB,EACpB,MAAgC,iBAAiB,CAAC;AAOnD,OAAO,EAAE,SAAS,EAAE,MAAa,4BAA4B,CAAC;AAE9D;IAKI;QACI,IAAI,QAAQ,EAAE,YAAY,CAAC;QAE3B,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAiB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACpE,CAAC;IAEY,8BAAK,GAAlB,UAAmB,QAAgB,EAAE,QAAgB;;gBAC7C,QAAQ;;;4BAAG,MAAM,eAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,YAAY,CAAC,EAAA;;;6BAEnF,SAAS,CAAC,QAAQ,CAAC;;wBAElB,KAAA,IAAI,CAAA;wBAAgB,MAAM,eAAA,QAAQ,CAAC,IAAI,EAAiB,EAAA;;wBAAxD,GAAK,YAAY,YAAuC,CAAC;wBACzD,MAAM,gBAAC,IAAI,CAAC,YAAY,EAAC;4BAG7B,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,EAAC;;;;KAC1C;IAEY,8BAAK,GAAlB;;gBAIQ,QAAQ;;;;wBAHZ,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;4BAClB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;wBAElC,MAAM,eAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAA;;;wBAExG,MAAM,gBAAC,QAAQ,CAAC,IAAI,EAAkB,EAAC;;;;KAC1C;IAEY,yCAAgB,GAA7B;;gBAIQ,QAAQ;;;;wBAHZ,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;4BAClB,MAAM,gBAAC,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAC;wBAElC,MAAM,eAAA,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAA;;;;;;;KACtH;IACL,qBAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["import { IFetlifeService }  from './ifetlifeservice';\r\nimport * as Constants       from '../constants';\r\n\r\nimport {\r\n    IFetlifeRepository,\r\n    FetlifeRepository\r\n}                           from '../repositories';\r\n\r\nimport {\r\n    MemberResponse,\r\n    TokenResponse\r\n}                           from '../responses';\r\n\r\nimport { isSuccess }        from '../helpers/responsehelpers';\r\n\r\nexport class FetlifeService implements IFetlifeService {\r\n    private readonly repository: IFetlifeRepository;\r\n    \r\n    private currentToken: TokenResponse; \r\n    \r\n    public constructor() {\r\n        let clientId, clientSecret;\r\n\r\n        this.repository = new FetlifeRepository(clientId, clientSecret);\r\n    }\r\n\r\n    public async login(username: string, password: string): Promise<TokenResponse> {\r\n        let response = await this.repository.login(username, password, Constants.REDIRECT_URL);\r\n\r\n        if(isSuccess(response))\r\n        {\r\n            this.currentToken = await response.json<TokenResponse>();\r\n            return this.currentToken;\r\n        }\r\n\r\n        return Promise.reject('invalid login');\r\n    }\r\n\r\n    public async getMe(): Promise<MemberResponse> {\r\n        if(!this.currentToken)\r\n            return Promise.reject('Need to login first');\r\n\r\n        let response = await this.repository.getMe(this.currentToken.token_type, this.currentToken.access_token);\r\n\r\n        return response.json<MemberResponse>();\r\n    }\r\n\r\n    public async getConversations() {\r\n        if(!this.currentToken)\r\n            return Promise.reject('Need to login first');\r\n\r\n        let response = await this.repository.getConversations(this.currentToken.token_type, this.currentToken.access_token);\r\n    }\r\n}"]}